# REST API 자동 생성기 - 실행 가능한 FastAPI 구현
# pip install fastapi uvicorn pydantic

from datetime import datetime
from enum import Enum
from typing import List, Optional

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, Field

app = FastAPI(title="REST API Generator", description="AI 기반 REST API 자동 생성기")

# ============================================================================
# 1. 데이터 모델 정의
# ============================================================================


class HTTPMethod(str, Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"
    PATCH = "PATCH"


class Framework(str, Enum):
    FASTAPI = "fastapi"
    FLASK = "flask"
    EXPRESS = "express"


class Database(str, Enum):
    POSTGRESQL = "postgresql"
    MYSQL = "mysql"
    MONGODB = "mongodb"
    SQLITE = "sqlite"


class AuthMethod(str, Enum):
    NONE = "none"
    JWT = "jwt"
    OAUTH2 = "oauth2"
    API_KEY = "api-key"


class EndpointModel(BaseModel):
    path: str = Field(..., description="API 경로")
    method: HTTPMethod = Field(..., description="HTTP 메서드")
    description: str = Field(..., description="엔드포인트 설명")
    parameters: Optional[str] = Field(None, description="파라미터")
    request_body: Optional[str] = Field(None, description="요청 본문")
    responses: Optional[str] = Field(None, description="응답")
    tags: List[str] = Field(default_factory=list, description="태그")


class APISpecModel(BaseModel):
    name: str = Field(..., description="API 이름")
    description: str = Field(..., description="API 설명")
    version: str = Field(default="1.0.0", description="버전")
    framework: Framework = Field(default=Framework.FASTAPI, description="프레임워크")
    database: Database = Field(default=Database.POSTGRESQL, description="데이터베이스")
    authentication: AuthMethod = Field(default=AuthMethod.JWT, description="인증 방식")
    endpoints: List[EndpointModel] = Field(..., description="엔드포인트 목록")


class GeneratedCodeResponse(BaseModel):
    main_code: str
    models: str
    database: str
    requirements: str
    documentation: str


# ============================================================================
# 2. 코드 생성 엔진
# ============================================================================


class FastAPICodeGenerator:
    def generate_api(self, spec: APISpecModel) -> GeneratedCodeResponse:
        """API 스펙을 바탕으로 완전한 코드 생성"""

        main_code = self._generate_main_code(spec)
        models = self._generate_models(spec)
        database = self._generate_database_code(spec)
        requirements = self._generate_requirements(spec)
        documentation = self._generate_documentation(spec)

        return GeneratedCodeResponse(
            main_code=main_code,
            models=models,
            database=database,
            requirements=requirements,
            documentation=documentation,
        )

    def _generate_main_code(self, spec: APISpecModel) -> str:
        """메인 애플리케이션 코드 생성"""

        endpoints_code = ""
        for endpoint in spec.endpoints:
            endpoints_code += self._generate_endpoint_code(endpoint, spec)

        auth_imports = ""
        auth_middleware = ""
        if spec.authentication != AuthMethod.NONE:
            auth_imports = """
from fastapi.security import HTTPBearer
from fastapi.middleware.cors import CORSMiddleware"""
            auth_middleware = """
# CORS 및 보안 미들웨어
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

security = HTTPBearer()"""

        return f'''"""
{spec.name} API
{spec.description}
Version: {spec.version}
Generated by REST API Generator
"""

from fastapi import FastAPI, HTTPException, Depends, status
from typing import List, Optional, Dict, Any
from pydantic import BaseModel
from datetime import datetime
import uvicorn{auth_imports}

# FastAPI 앱 생성
app = FastAPI(
    title="{spec.name}",
    description="{spec.description}",
    version="{spec.version}",
    docs_url="/docs",
    redoc_url="/redoc"
)
{auth_middleware}

# 기본 응답 모델
class APIResponse(BaseModel):
    success: bool = True
    message: str = "Success"
    data: Optional[Dict[Any, Any]] = None

@app.get("/")
async def root():
    """API 루트 엔드포인트"""
    return APIResponse(
        message="Welcome to {spec.name} API",
        data={{"version": "{spec.version}", "docs_url": "/docs"}}
    )

@app.get("/health")
async def health_check():
    """헬스 체크 엔드포인트"""
    return APIResponse(
        message="API is healthy",
        data={{"timestamp": datetime.now().isoformat(), "service": "{spec.name}"}}
    )

{endpoints_code}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
'''

    def _generate_endpoint_code(
        self, endpoint: EndpointModel, spec: APISpecModel
    ) -> str:
        """개별 엔드포인트 코드 생성"""
        method = endpoint.method.lower()
        function_name = self._path_to_function_name(endpoint.path, endpoint.method)

        # 경로 파라미터 추출
        path_params = self._extract_path_params(endpoint.path)
        params_str = ""
        for param in path_params:
            params_str += f", {param}: int"

        # 요청 본문이 필요한 메서드
        if endpoint.method in ["POST", "PUT", "PATCH"]:
            params_str += ", request_data: Dict[Any, Any] = {}"

        # 비즈니스 로직 생성
        business_logic = self._generate_business_logic(endpoint, path_params)

        return f'''
@app.{method}("{endpoint.path}", tags={endpoint.tags or ["default"]})
async def {function_name}({params_str.lstrip(", ") if params_str else ""}):
    """
    {endpoint.description}
    
    Parameters: {endpoint.parameters or "No parameters"}
    Returns: {endpoint.responses or "API response"}
    """
    try:
{business_logic}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {{str(e)}}"
        )
'''

    def _generate_models(self, spec: APISpecModel) -> str:
        """데이터 모델 코드 생성"""
        return f'''"""
{spec.name} 데이터 모델
Pydantic 모델 정의
"""

from pydantic import BaseModel, Field, EmailStr
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum

# ============================================================================
# 기본 모델들
# ============================================================================

class UserBase(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    email: str = Field(..., description="사용자 이메일")

class UserCreate(UserBase):
    password: str = Field(..., min_length=8, description="비밀번호")

class UserResponse(UserBase):
    id: int
    is_active: bool = True
    created_at: datetime
    
    class Config:
        from_attributes = True

class ProductBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=200)
    description: Optional[str] = None
    price: float = Field(..., gt=0)
    stock_quantity: int = Field(default=0, ge=0)

class ProductCreate(ProductBase):
    category_id: Optional[int] = None

class ProductResponse(ProductBase):
    id: int
    category_id: Optional[int] = None
    is_active: bool = True
    created_at: datetime
    
    class Config:
        from_attributes = True

class CategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    description: Optional[str] = None

class CategoryResponse(CategoryBase):
    id: int
    created_at: datetime
    product_count: int = 0
    
    class Config:
        from_attributes = True

class OrderBase(BaseModel):
    user_id: int
    total_amount: float = Field(..., gt=0)
    status: str = Field(default="pending")

class OrderResponse(OrderBase):
    id: str
    order_date: datetime
    items: List[Dict[str, Any]] = []
    
    class Config:
        from_attributes = True

# 인증 관련 모델
class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"

class LoginRequest(BaseModel):
    username: str
    password: str

# 공통 응답 모델
class PaginatedResponse(BaseModel):
    items: List[Dict[str, Any]]
    total: int
    page: int = 1
    size: int = 10
    pages: int

    def calculate_pages(self):
        self.pages = (self.total + self.size - 1) // self.size
        return self
'''

    def _generate_database_code(self, spec: APISpecModel) -> str:
        """데이터베이스 설정 코드 생성"""

        db_configs = {
            "postgresql": "postgresql://user:password@localhost/dbname",
            "mysql": "mysql://user:password@localhost/dbname",
            "sqlite": "sqlite:///./app.db",
            "mongodb": "mongodb://localhost:27017/dbname",
        }

        db_url = db_configs.get(spec.database.value, db_configs["sqlite"])

        if spec.database == Database.MONGODB:
            return f'''"""
MongoDB 데이터베이스 설정
"""

from motor.motor_asyncio import AsyncIOMotorClient
from typing import Optional
import os

# MongoDB 연결 설정
DATABASE_URL = os.getenv("DATABASE_URL", "{db_url}")
client: Optional[AsyncIOMotorClient] = None

async def connect_to_mongo():
    """MongoDB 연결"""
    global client
    client = AsyncIOMotorClient(DATABASE_URL)

async def close_mongo_connection():
    """MongoDB 연결 종료"""
    global client
    if client:
        client.close()

def get_database():
    """데이터베이스 인스턴스 반환"""
    return client.get_default_database()

# 컬렉션 정의
def get_users_collection():
    db = get_database()
    return db.users

def get_products_collection():
    db = get_database()
    return db.products

def get_categories_collection():
    db = get_database()
    return db.categories
'''
        else:
            return f'''"""
{spec.database.value} 데이터베이스 설정
SQLAlchemy 기반
"""

from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, Float, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from typing import Generator
from datetime import datetime
import os

# 데이터베이스 설정
DATABASE_URL = os.getenv("DATABASE_URL", "{db_url}")

# SQLAlchemy 설정
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# 데이터베이스 모델
class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True, nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class Product(Base):
    __tablename__ = "products"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(200), nullable=False, index=True)
    description = Column(Text)
    price = Column(Float, nullable=False)
    stock_quantity = Column(Integer, default=0)
    category_id = Column(Integer)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class Category(Base):
    __tablename__ = "categories"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)

def get_db() -> Generator:
    """데이터베이스 세션 의존성"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def init_db():
    """데이터베이스 초기화"""
    Base.metadata.create_all(bind=engine)

def create_sample_data():
    """샘플 데이터 생성"""
    db = SessionLocal()
    try:
        # 카테고리 생성
        if not db.query(Category).first():
            categories = [
                Category(name="Electronics", description="전자제품"),
                Category(name="Books", description="도서"),
                Category(name="Clothing", description="의류"),
            ]
            for category in categories:
                db.add(category)
            db.commit()
            
        # 상품 생성
        if not db.query(Product).first():
            products = [
                Product(name="스마트폰", description="최신 스마트폰", price=799.99, stock_quantity=50, category_id=1),
                Product(name="프로그래밍 책", description="Python 학습서", price=29.99, stock_quantity=100, category_id=2),
                Product(name="티셔츠", description="편안한 면 티셔츠", price=19.99, stock_quantity=200, category_id=3),
            ]
            for product in products:
                db.add(product)
            db.commit()
            
    except Exception as e:
        print(f"샘플 데이터 생성 오류: {{e}}")
        db.rollback()
    finally:
        db.close()
'''

    def _generate_requirements(self, spec: APISpecModel) -> str:
        """requirements.txt 생성"""
        base_requirements = [
            "fastapi==0.104.1",
            "uvicorn[standard]==0.24.0",
            "pydantic==2.5.0",
        ]

        if spec.database == Database.MONGODB:
            base_requirements.append("motor==3.3.2")
        else:
            base_requirements.extend(["sqlalchemy==2.0.23", "alembic==1.13.0"])

        if spec.database == Database.POSTGRESQL:
            base_requirements.append("psycopg2-binary==2.9.9")
        elif spec.database == Database.MYSQL:
            base_requirements.append("pymysql==1.1.0")

        if spec.authentication != AuthMethod.NONE:
            base_requirements.extend(
                ["python-jose[cryptography]==3.3.0", "passlib[bcrypt]==1.7.4"]
            )

        return "\\n".join(base_requirements)

    def _generate_documentation(self, spec: APISpecModel) -> str:
        """API 문서 생성"""
        endpoints_doc = ""
        for endpoint in spec.endpoints:
            endpoints_doc += f"""
### {endpoint.method} {endpoint.path}

**설명:** {endpoint.description}

**파라미터:** {endpoint.parameters or "없음"}

**요청 본문:**
```json
{endpoint.request_body or "없음"}
```

**응답:**
```json
{endpoint.responses or "표준 API 응답"}
```

---
"""

        return f"""# {spec.name} API 문서

## 개요
{spec.description}

- **버전:** {spec.version}
- **프레임워크:** {spec.framework.value}
- **데이터베이스:** {spec.database.value}
- **인증:** {spec.authentication.value}

## 빠른 시작

### 1. 설치
```bash
pip install -r requirements.txt
```

### 2. 실행
```bash
python main.py
```

### 3. API 문서 확인
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## API 엔드포인트

{endpoints_doc}

## 사용 예시

### 기본 요청
```bash
curl -X GET "http://localhost:8000/" -H "accept: application/json"
```

### 헬스 체크
```bash
curl -X GET "http://localhost:8000/health" -H "accept: application/json"
```

## 개발 정보

이 API는 REST API Generator에 의해 자동 생성되었습니다.

- 생성 시간: {datetime.now().isoformat()}
- 프레임워크: FastAPI
- 문서화: 자동 생성 (OpenAPI/Swagger)

## 다음 단계

1. 데이터베이스 연결 설정
2. 인증 시스템 구현
3. 비즈니스 로직 추가
4. 테스트 작성
5. 배포 설정
"""

    def _path_to_function_name(self, path: str, method: str) -> str:
        """경로를 함수명으로 변환"""
        import re

        # /api/users/{id} -> get_users_by_id
        parts = path.strip("/").split("/")
        name_parts = [method.lower()]

        for part in parts:
            if part.startswith("{") and part.endswith("}"):
                name_parts.extend(["by", part[1:-1]])
            elif part != "api":
                name_parts.append(re.sub(r"[^a-zA-Z0-9]", "_", part))

        return "_".join(name_parts)

    def _extract_path_params(self, path: str) -> List[str]:
        """경로에서 파라미터 추출"""
        import re

        return re.findall(r"\\{([^}]+)\\}", path)

    def _generate_business_logic(
        self, endpoint: EndpointModel, path_params: List[str]
    ) -> str:
        """비즈니스 로직 생성"""
        if endpoint.method == "GET":
            if path_params:
                param_name = path_params[0]
                return f"""        # 특정 리소스 조회
        resource_id = {param_name}
        
        # TODO: 데이터베이스에서 ID로 조회하는 로직 구현
        # 예시: resource = db.query(Model).filter(Model.id == resource_id).first()
        
        mock_data = {{
            "id": resource_id,
            "message": "Resource found",
            "timestamp": datetime.now().isoformat()
        }}
        
        return APIResponse(
            message="Resource retrieved successfully",
            data=mock_data
        )"""
            else:
                return """        # 리소스 목록 조회
        # TODO: 데이터베이스에서 목록 조회하는 로직 구현
        # 예시: resources = db.query(Model).all()
        
        mock_data = [
            {"id": 1, "name": "Sample Item 1"},
            {"id": 2, "name": "Sample Item 2"},
            {"id": 3, "name": "Sample Item 3"}
        ]
        
        return APIResponse(
            message="Resources retrieved successfully",
            data={"items": mock_data, "total": len(mock_data)}
        )"""

        elif endpoint.method == "POST":
            return """        # 새 리소스 생성
        # TODO: 입력 데이터 검증 및 데이터베이스 저장 로직 구현
        # 예시: new_resource = Model(**request_data)
        #       db.add(new_resource)
        #       db.commit()
        
        mock_id = 123
        
        return APIResponse(
            message="Resource created successfully",
            data={"id": mock_id, "created_at": datetime.now().isoformat()}
        )"""

        elif endpoint.method == "PUT":
            if path_params:
                param_name = path_params[0]
                return f"""        # 리소스 업데이트
        resource_id = {param_name}
        
        # TODO: 데이터베이스에서 리소스 찾기 및 업데이트 로직 구현
        # 예시: resource = db.query(Model).filter(Model.id == resource_id).first()
        #       if not resource:
        #           raise HTTPException(status_code=404, detail="Resource not found")
        #       for key, value in request_data.items():
        #           setattr(resource, key, value)
        #       db.commit()
        
        return APIResponse(
            message="Resource updated successfully",
            data={{"id": resource_id, "updated_at": datetime.now().isoformat()}}
        )"""

        elif endpoint.method == "DELETE":
            if path_params:
                param_name = path_params[0]
                return f"""        # 리소스 삭제
        resource_id = {param_name}
        
        # TODO: 데이터베이스에서 리소스 삭제 로직 구현
        # 예시: resource = db.query(Model).filter(Model.id == resource_id).first()
        #       if not resource:
        #           raise HTTPException(status_code=404, detail="Resource not found")
        #       db.delete(resource)
        #       db.commit()
        
        return APIResponse(
            message="Resource deleted successfully",
            data={{"id": resource_id, "deleted_at": datetime.now().isoformat()}}
        )"""

        return """        # 기본 로직
        return APIResponse(
            message="Operation completed successfully",
            data={"timestamp": datetime.now().isoformat()}
        )"""


# ============================================================================
# 3. 예제 데이터
# ============================================================================

# 예제 1: 사용자 관리 시스템
USER_MANAGEMENT_EXAMPLE = {
    "name": "User Management API",
    "description": "사용자 등록, 인증, 프로필 관리를 위한 REST API",
    "version": "1.0.0",
    "framework": "fastapi",
    "database": "postgresql",
    "authentication": "jwt",
    "endpoints": [
        {
            "path": "/api/auth/register",
            "method": "POST",
            "description": "새 사용자 등록",
            "parameters": "없음",
            "request_body": '{"username": "testuser", "email": "test@example.com", "password": "password123"}',
            "responses": '{"success": true, "message": "User created", "data": {"id": 1, "username": "testuser"}}',
            "tags": ["authentication"],
        },
        {
            "path": "/api/auth/login",
            "method": "POST",
            "description": "사용자 로그인",
            "parameters": "없음",
            "request_body": '{"username": "testuser", "password": "password123"}',
            "responses": '{"access_token": "jwt_token_here", "token_type": "bearer"}',
            "tags": ["authentication"],
        },
        {
            "path": "/api/users",
            "method": "GET",
            "description": "사용자 목록 조회",
            "parameters": "page, limit (선택사항)",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"items": [], "total": 10}}',
            "tags": ["users"],
        },
        {
            "path": "/api/users/{user_id}",
            "method": "GET",
            "description": "특정 사용자 정보 조회",
            "parameters": "user_id: 사용자 ID",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"id": 1, "username": "testuser", "email": "test@example.com"}}',
            "tags": ["users"],
        },
    ],
}

# 예제 2: 블로그 시스템
BLOG_SYSTEM_EXAMPLE = {
    "name": "Blog System API",
    "description": "블로그 포스트 작성, 댓글, 카테고리 관리 API",
    "version": "1.2.0",
    "framework": "fastapi",
    "database": "mysql",
    "authentication": "jwt",
    "endpoints": [
        {
            "path": "/api/posts",
            "method": "GET",
            "description": "블로그 포스트 목록 조회",
            "parameters": "page, category, search (선택사항)",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"items": [], "total": 50, "page": 1}}',
            "tags": ["posts"],
        },
        {
            "path": "/api/posts",
            "method": "POST",
            "description": "새 블로그 포스트 작성",
            "parameters": "인증 필요",
            "request_body": '{"title": "My Blog Post", "content": "Post content here", "category_id": 1}',
            "responses": '{"success": true, "data": {"id": 1, "title": "My Blog Post", "slug": "my-blog-post"}}',
            "tags": ["posts"],
        },
        {
            "path": "/api/posts/{post_id}",
            "method": "GET",
            "description": "특정 블로그 포스트 조회",
            "parameters": "post_id: 포스트 ID",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"id": 1, "title": "Post Title", "content": "Full content", "comments": []}}',
            "tags": ["posts"],
        },
        {
            "path": "/api/categories",
            "method": "GET",
            "description": "카테고리 목록 조회",
            "parameters": "없음",
            "request_body": "없음",
            "responses": '{"success": true, "data": [{"id": 1, "name": "Technology", "post_count": 15}]}',
            "tags": ["categories"],
        },
    ],
}

# 예제 3: 전자상거래 API
ECOMMERCE_EXAMPLE = {
    "name": "E-commerce API",
    "description": "온라인 쇼핑몰을 위한 완전한 전자상거래 API",
    "version": "2.0.0",
    "framework": "fastapi",
    "database": "postgresql",
    "authentication": "jwt",
    "endpoints": [
        {
            "path": "/api/products",
            "method": "GET",
            "description": "상품 목록 조회",
            "parameters": "category, min_price, max_price, search",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"items": [], "total": 200, "filters": {}}}',
            "tags": ["products"],
        },
        {
            "path": "/api/products/{product_id}",
            "method": "GET",
            "description": "상품 상세 정보 조회",
            "parameters": "product_id: 상품 ID",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"id": 1, "name": "Product Name", "price": 99.99, "images": []}}',
            "tags": ["products"],
        },
        {
            "path": "/api/cart",
            "method": "GET",
            "description": "장바구니 조회",
            "parameters": "인증 필요",
            "request_body": "없음",
            "responses": '{"success": true, "data": {"items": [], "total_amount": 199.99, "item_count": 3}}',
            "tags": ["cart"],
        },
        {
            "path": "/api/cart/items",
            "method": "POST",
            "description": "장바구니에 상품 추가",
            "parameters": "인증 필요",
            "request_body": '{"product_id": 1, "quantity": 2}',
            "responses": '{"success": true, "message": "Item added to cart", "data": {"cart_total": 149.99}}',
            "tags": ["cart"],
        },
        {
            "path": "/api/orders",
            "method": "POST",
            "description": "주문 생성",
            "parameters": "인증 필요",
            "request_body": '{"items": [{"product_id": 1, "quantity": 2}], "shipping_address": {}}',
            "responses": '{"success": true, "data": {"order_id": "ORD-001", "total_amount": 199.99, "status": "pending"}}',
            "tags": ["orders"],
        },
    ],
}

# 빠른 엔드포인트 템플릿 추가 (예제 확장)
QUICK_TEMPLATES = {
    "user_crud": [
        {
            "path": "/api/users",
            "method": "GET",
            "description": "사용자 목록 조회",
            "parameters": "page: 페이지 번호, limit: 결과 개수",
            "responses": '{"success": true, "data": {"items": [], "total": 0}}',
            "tags": ["users"],
        },
        {
            "path": "/api/users",
            "method": "POST",
            "description": "새 사용자 생성",
            "request_body": '{"username": "string", "email": "string", "password": "string"}',
            "responses": '{"success": true, "data": {"id": 1, "username": "string"}}',
            "tags": ["users"],
        },
        {
            "path": "/api/users/{user_id}",
            "method": "GET",
            "description": "특정 사용자 조회",
            "parameters": "user_id: 사용자 ID",
            "responses": '{"success": true, "data": {"id": 1, "username": "string", "email": "string"}}',
            "tags": ["users"],
        },
        {
            "path": "/api/users/{user_id}",
            "method": "PUT",
            "description": "사용자 정보 수정",
            "parameters": "user_id: 사용자 ID",
            "request_body": '{"username": "string", "email": "string"}',
            "responses": '{"success": true, "message": "User updated"}',
            "tags": ["users"],
        },
        {
            "path": "/api/users/{user_id}",
            "method": "DELETE",
            "description": "사용자 삭제",
            "parameters": "user_id: 사용자 ID",
            "responses": '{"success": true, "message": "User deleted"}',
            "tags": ["users"],
        },
    ],
    "blog_crud": [
        {
            "path": "/api/posts",
            "method": "GET",
            "description": "블로그 포스트 목록 조회",
            "parameters": "page, category, search",
            "responses": '{"success": true, "data": {"items": [], "total": 0}}',
            "tags": ["posts"],
        },
        {
            "path": "/api/posts",
            "method": "POST",
            "description": "새 포스트 작성",
            "request_body": '{"title": "string", "content": "string", "category_id": 1}',
            "responses": '{"success": true, "data": {"id": 1, "title": "string"}}',
            "tags": ["posts"],
        },
        {
            "path": "/api/posts/{post_id}",
            "method": "GET",
            "description": "포스트 상세 조회",
            "parameters": "post_id: 포스트 ID",
            "responses": '{"success": true, "data": {"id": 1, "title": "string", "content": "string"}}',
            "tags": ["posts"],
        },
    ],
    "auth": [
        {
            "path": "/api/auth/register",
            "method": "POST",
            "description": "회원가입",
            "request_body": '{"username": "string", "email": "string", "password": "string"}',
            "responses": '{"success": true, "data": {"id": 1, "username": "string"}}',
            "tags": ["authentication"],
        },
        {
            "path": "/api/auth/login",
            "method": "POST",
            "description": "로그인",
            "request_body": '{"username": "string", "password": "string"}',
            "responses": '{"access_token": "string", "token_type": "bearer"}',
            "tags": ["authentication"],
        },
        {
            "path": "/api/auth/logout",
            "method": "POST",
            "description": "로그아웃",
            "responses": '{"success": true, "message": "Logged out"}',
            "tags": ["authentication"],
        },
    ],
}


@app.get("/api/templates")
async def get_quick_templates():
    """빠른 엔드포인트 템플릿 목록 반환"""
    return {
        "templates": [
            {
                "id": "user_crud",
                "name": "사용자 CRUD",
                "description": "사용자 생성, 조회, 수정, 삭제 API",
                "endpoints_count": len(QUICK_TEMPLATES["user_crud"]),
            },
            {
                "id": "blog_crud",
                "name": "블로그 CRUD",
                "description": "블로그 포스트 관리 API",
                "endpoints_count": len(QUICK_TEMPLATES["blog_crud"]),
            },
            {
                "id": "auth",
                "name": "인증 시스템",
                "description": "회원가입, 로그인, 로그아웃 API",
                "endpoints_count": len(QUICK_TEMPLATES["auth"]),
            },
        ]
    }


@app.get("/api/templates/{template_id}")
async def get_template_endpoints(template_id: str):
    """특정 템플릿의 엔드포인트 목록 반환"""
    if template_id not in QUICK_TEMPLATES:
        raise HTTPException(status_code=404, detail="템플릿을 찾을 수 없습니다")

    return {"template_id": template_id, "endpoints": QUICK_TEMPLATES[template_id]}


# 전역 코드 생성기 인스턴스
code_generator = FastAPICodeGenerator()


@app.post("/api/generate", response_model=GeneratedCodeResponse)
async def generate_api_code(spec: APISpecModel):
    """API 스펙을 바탕으로 완전한 코드 생성"""
    try:
        result = code_generator.generate_api(spec)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"코드 생성 중 오류 발생: {str(e)}")


@app.get("/api/examples")
async def get_examples():
    """사용 가능한 예제 목록 반환"""
    return {
        "examples": [
            {
                "id": "user_management",
                "name": "사용자 관리 시스템",
                "description": "사용자 등록, 인증, 프로필 관리",
                "endpoints_count": len(USER_MANAGEMENT_EXAMPLE["endpoints"]),
                "framework": "FastAPI",
                "database": "PostgreSQL",
            },
            {
                "id": "blog_system",
                "name": "블로그 시스템",
                "description": "포스트, 댓글, 카테고리 관리",
                "endpoints_count": len(BLOG_SYSTEM_EXAMPLE["endpoints"]),
                "framework": "FastAPI",
                "database": "MySQL",
            },
            {
                "id": "ecommerce",
                "name": "전자상거래 시스템",
                "description": "상품, 장바구니, 주문 관리",
                "endpoints_count": len(ECOMMERCE_EXAMPLE["endpoints"]),
                "framework": "FastAPI",
                "database": "PostgreSQL",
            },
        ]
    }


@app.get("/api/examples/{example_id}")
async def get_example(example_id: str):
    """특정 예제의 상세 스펙 반환"""
    examples = {
        "user_management": USER_MANAGEMENT_EXAMPLE,
        "blog_system": BLOG_SYSTEM_EXAMPLE,
        "ecommerce": ECOMMERCE_EXAMPLE,
    }

    if example_id not in examples:
        raise HTTPException(status_code=404, detail="예제를 찾을 수 없습니다")

    return examples[example_id]


@app.post("/api/download")
async def download_generated_code(spec: APISpecModel):
    """생성된 코드 파일들을 JSON으로 반환 (다운로드용)"""
    try:
        result = code_generator.generate_api(spec)

        files = {
            "main.py": result.main_code,
            "models.py": result.models,
            "database.py": result.database,
            "requirements.txt": result.requirements,
            "README.md": result.documentation,
        }

        return {
            "success": True,
            "message": "코드가 성공적으로 생성되었습니다",
            "files": files,
            "project_name": spec.name.replace(" ", "_").lower(),
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"파일 생성 중 오류 발생: {str(e)}")


@app.get("/", response_class=HTMLResponse)
async def get_web_interface():
    """웹 인터페이스 HTML 반환"""
    return """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>REST API Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
</head>
<body class="bg-gray-50 min-h-screen">
    <div x-data="apiGenerator()" class="max-w-7xl mx-auto p-6" x-init="init()">
        <!-- 헤더 -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800 mb-2">🚀 REST API Generator</h1>
            <p class="text-lg text-gray-600">Python FastAPI 기반 자동 REST API 생성기</p>
            <p class="text-sm text-gray-500 mt-2">자유롭게 API 엔드포인트를 추가/편집 가능</p>
        </div>
        
        <!-- 탭 네비게이션 -->
        <div class="bg-white rounded-xl shadow-lg mb-8">
            <div class="flex border-b">
                <button @click="activeSection = 'examples'" 
                        :class="activeSection === 'examples' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-600'"
                        class="px-6 py-4 font-medium">
                    🎯 예제 선택
                </button>
                <button @click="activeSection = 'custom'" 
                        :class="activeSection === 'custom' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-600'"
                        class="px-6 py-4 font-medium">
                    ⚙️ 커스텀 API
                </button>
                <button @click="activeSection = 'endpoints'" 
                        :class="activeSection === 'endpoints' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-600'"
                        class="px-6 py-4 font-medium">
                    🔗 엔드포인트 관리
                </button>
            </div>
            
            <!-- 예제 선택 섹션 -->
            <div x-show="activeSection === 'examples'" class="p-6">
                <h2 class="text-2xl font-semibold mb-4 text-center">빠른 시작 - 예제 선택</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-4">
                    <template x-for="example in examples" :key="example.id">
                        <div class="border-2 border-gray-200 rounded-lg p-6 hover:border-blue-400 hover:shadow-md transition-all cursor-pointer"
                             @click="loadExample(example.id)"
                             :class="selectedExample === example.id ? 'border-blue-500 bg-blue-50' : ''">
                            <h3 class="font-bold text-lg mb-2" x-text="example.name"></h3>
                            <p class="text-gray-600 text-sm mb-3" x-text="example.description"></p>
                            <div class="flex justify-between items-center text-xs">
                                <span class="bg-green-100 text-green-800 px-2 py-1 rounded" 
                                      x-text="example.endpoints_count + '개 API'"></span>
                                <span class="text-gray-500" x-text="example.database"></span>
                            </div>
                        </div>
                    </template>
                </div>
                <div class="text-center">
                    <button @click="activeSection = 'endpoints'" 
                            class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                        선택한 예제 수정하기 →
                    </button>
                </div>
            </div>
            
            <!-- 커스텀 API 섹션 -->
            <div x-show="activeSection === 'custom'" class="p-6">
                <h2 class="text-2xl font-semibold mb-4 text-center">처음부터 새로 만들기</h2>
                <div class="max-w-2xl mx-auto">
                    <button @click="createBlankAPI()" 
                            class="w-full border-2 border-dashed border-gray-300 rounded-lg p-8 hover:border-blue-400 hover:bg-blue-50 transition-all text-center">
                        <div class="text-4xl mb-4">➕</div>
                        <h3 class="text-xl font-semibold text-gray-700 mb-2">새 API 프로젝트 시작</h3>
                        <p class="text-gray-500">빈 프로젝트에서 시작하여 원하는 엔드포인트를 추가하세요</p>
                    </button>
                </div>
            </div>
        </div>

        <!-- 엔드포인트 관리 섹션 -->
        <div x-show="activeSection === 'endpoints'" class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold">🔗 API 엔드포인트 관리</h2>
                <button @click="showEndpointModal = true; editingEndpoint = null; resetEndpointForm()" 
                        class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center">
                    ➕ 엔드포인트 추가
                </button>
            </div>
            
            <!-- 엔드포인트 목록 -->
            <div class="space-y-3">
                <template x-for="(endpoint, index) in spec.endpoints" :key="index">
                    <div class="border border-gray-200 rounded-lg p-4 flex items-center justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-2">
                                <span class="px-2 py-1 text-xs font-medium rounded"
                                      :class="{
                                          'bg-green-100 text-green-800': endpoint.method === 'GET',
                                          'bg-blue-100 text-blue-800': endpoint.method === 'POST',
                                          'bg-yellow-100 text-yellow-800': endpoint.method === 'PUT',
                                          'bg-red-100 text-red-800': endpoint.method === 'DELETE',
                                          'bg-purple-100 text-purple-800': endpoint.method === 'PATCH'
                                      }"
                                      x-text="endpoint.method">
                                </span>
                                <span class="font-mono text-sm font-medium" x-text="endpoint.path"></span>
                                <template x-if="endpoint.tags && endpoint.tags.length > 0">
                                    <span class="bg-gray-100 text-gray-700 px-2 py-1 text-xs rounded" 
                                          x-text="endpoint.tags[0]"></span>
                                </template>
                            </div>
                            <p class="text-gray-600 text-sm" x-text="endpoint.description"></p>
                        </div>
                        <div class="flex space-x-2">
                            <button @click="editEndpoint(index)" 
                                    class="text-blue-600 hover:bg-blue-50 p-2 rounded">
                                ✏️
                            </button>
                            <button @click="deleteEndpoint(index)" 
                                    class="text-red-600 hover:bg-red-50 p-2 rounded">
                                🗑️
                            </button>
                        </div>
                    </div>
                </template>
                
                <div x-show="spec.endpoints.length === 0" class="text-center py-8 text-gray-500">
                    <div class="text-4xl mb-4">📝</div>
                    <p>아직 엔드포인트가 없습니다.<br>위의 "➕ 엔드포인트 추가" 버튼을 클릭하여 시작하세요!</p>
                </div>
            </div>
        </div>

        <!-- 메인 컨텐츠 -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- 설정 패널 -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-6">⚙️ API 설정</h2>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">API 이름 *</label>
                        <input x-model="spec.name" 
                               type="text" 
                               placeholder="예: My Awesome API"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-2">설명 *</label>
                        <textarea x-model="spec.description" 
                                  placeholder="API의 목적과 기능을 설명해주세요"
                                  class="w-full p-3 border border-gray-300 rounded-lg h-24 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">프레임워크</label>
                            <select x-model="spec.framework" 
                                    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="fastapi">🐍 FastAPI</option>
                                <option value="flask">🌶️ Flask</option>
                                <option value="express">📗 Express.js</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">데이터베이스</label>
                            <select x-model="spec.database" 
                                    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="postgresql">🐘 PostgreSQL</option>
                                <option value="mysql">🐬 MySQL</option>
                                <option value="sqlite">📱 SQLite</option>
                                <option value="mongodb">🍃 MongoDB</option>
                            </select>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-2">인증 방식</label>
                        <select x-model="spec.authentication" 
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="none">🚫 인증 없음</option>
                            <option value="jwt">🔑 JWT</option>
                            <option value="oauth2">🔐 OAuth 2.0</option>
                            <option value="api-key">🗝️ API Key</option>
                        </select>
                    </div>
                    
                    <!-- 엔드포인트 요약 -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="font-medium mb-2">📊 현재 상태</h4>
                        <div class="space-y-1 text-sm">
                            <div class="flex justify-between">
                                <span>엔드포인트 개수:</span>
                                <span class="font-medium" x-text="spec.endpoints.length + '개'"></span>
                            </div>
                            <div class="flex justify-between">
                                <span>HTTP 메서드:</span>
                                <span class="text-xs">
                                    <template x-for="method in [...new Set(spec.endpoints.map(e => e.method))]">
                                        <span class="bg-gray-200 px-1 rounded mr-1" x-text="method"></span>
                                    </template>
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 빠른 엔드포인트 추가 -->
                    <div x-show="spec.endpoints.length === 0" class="border-2 border-dashed border-gray-300 rounded-lg p-4">
                        <h4 class="font-medium mb-3">🚀 빠른 시작</h4>
                        <div class="space-y-2">
                            <button @click="addQuickEndpoint('userList')" 
                                    class="w-full text-left p-2 hover:bg-gray-100 rounded text-sm">
                                + GET /api/users (사용자 목록)
                            </button>
                            <button @click="addQuickEndpoint('userCreate')" 
                                    class="w-full text-left p-2 hover:bg-gray-100 rounded text-sm">
                                + POST /api/users (사용자 생성)
                            </button>
                            <button @click="addQuickEndpoint('login')" 
                                    class="w-full text-left p-2 hover:bg-gray-100 rounded text-sm">
                                + POST /api/auth/login (로그인)
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 space-y-3">
                    <!-- 엔드포인트 관리 버튼 -->
                    <button @click="activeSection = 'endpoints'" 
                            class="w-full bg-gray-600 text-white p-3 rounded-lg hover:bg-gray-700 transition-colors font-medium">
                        🔗 엔드포인트 관리 (<span x-text="spec.endpoints.length"></span>개)
                    </button>
                    
                    <!-- API 생성 버튼 -->
                    <button @click="generateAPI()" 
                            :disabled="isGenerating || !spec.name || !spec.description || spec.endpoints.length === 0"
                            class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-lg hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-semibold text-lg shadow-lg">
                        <span x-show="!isGenerating">🚀 API 생성하기</span>
                        <span x-show="isGenerating" class="flex items-center justify-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            생성 중...
                        </span>
                    </button>
                    
                    <!-- 경고 메시지 -->
                    <div x-show="spec.endpoints.length === 0 && (spec.name || spec.description)" 
                         class="text-center text-sm text-orange-600 bg-orange-50 p-2 rounded">
                        ⚠️ 엔드포인트를 추가해야 API를 생성할 수 있습니다
                    </div>
                </div>
            </div>

            <!-- 결과 패널 -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-6">📄 생성된 코드</h2>
                
                <div x-show="generatedCode && generatedCode.main_code">
                    <!-- 탭 -->
                    <div class="flex space-x-1 mb-4 bg-gray-100 p-1 rounded-lg">
                        <button @click="activeTab = 'main'" 
                                :class="activeTab === 'main' ? 'bg-white shadow' : 'hover:bg-gray-200'"
                                class="flex-1 px-3 py-2 rounded-md text-sm font-medium transition-all">
                            main.py
                        </button>
                        <button @click="activeTab = 'models'" 
                                :class="activeTab === 'models' ? 'bg-white shadow' : 'hover:bg-gray-200'"
                                class="flex-1 px-3 py-2 rounded-md text-sm font-medium transition-all">
                            models.py
                        </button>
                        <button @click="activeTab = 'database'" 
                                :class="activeTab === 'database' ? 'bg-white shadow' : 'hover:bg-gray-200'"
                                class="flex-1 px-3 py-2 rounded-md text-sm font-medium transition-all">
                            database.py
                        </button>
                    </div>
                    
                    <!-- 코드 표시 -->
                    <div class="bg-gray-900 rounded-lg p-4 mb-4">
                        <pre class="text-green-400 text-xs overflow-auto h-80 whitespace-pre-wrap"><code x-text="getActiveTabContent()"></code></pre>
                    </div>
                    
                    <!-- 다운로드 및 실행 정보 -->
                    <div class="space-y-3">
                        <button @click="downloadAll()" 
                                class="w-full bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
                            📥 모든 파일 다운로드
                        </button>
                        
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <h4 class="font-medium text-blue-800 mb-2">🏃‍♂️ 실행 방법:</h4>
                            <ol class="text-sm text-blue-700 space-y-1">
                                <li>1. 파일들을 다운로드하여 프로젝트 폴더에 저장</li>
                                <li>2. <code class="bg-blue-200 px-1 rounded">pip install -r requirements.txt</code></li>
                                <li>3. <code class="bg-blue-200 px-1 rounded">python main.py</code></li>
                                <li>4. http://localhost:8000/docs 에서 API 문서 확인</li>
                            </ol>
                        </div>
                    </div>
                </div>
                
                <div x-show="!generatedCode || !generatedCode.main_code" class="text-center py-16">
                    <div class="text-6xl mb-4">🛠️</div>
                    <p class="text-gray-500 text-lg">예제를 선택하거나 설정을 입력하고<br>생성 버튼을 클릭하세요</p>
                </div>
            </div>
        </div>

        <!-- 엔드포인트 추가/편집 모달 -->
        <div x-show="showEndpointModal" 
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0"
             x-transition:enter-end="opacity-100"
             class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto"
                 @click.away="showEndpointModal = false">
                <h3 class="text-xl font-semibold mb-4">
                    <span x-show="editingEndpoint !== null">✏️ 엔드포인트 편집</span>
                    <span x-show="editingEndpoint === null">➕ 새 엔드포인트 추가</span>
                </h3>
                
                <div class="space-y-4">
                    <!-- HTTP 메서드와 경로 -->
                    <div class="grid grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">HTTP 메서드</label>
                            <select x-model="newEndpoint.method" 
                                    class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="GET">GET</option>
                                <option value="POST">POST</option>
                                <option value="PUT">PUT</option>
                                <option value="DELETE">DELETE</option>
                                <option value="PATCH">PATCH</option>
                            </select>
                        </div>
                        <div class="col-span-2">
                            <label class="block text-sm font-medium mb-2">API 경로</label>
                            <input x-model="newEndpoint.path" 
                                   type="text" 
                                   placeholder="/api/users 또는 /api/users/{id}"
                                   class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>

                    <!-- 설명 -->
                    <div>
                        <label class="block text-sm font-medium mb-2">설명</label>
                        <input x-model="newEndpoint.description" 
                               type="text" 
                               placeholder="이 엔드포인트가 하는 일을 설명하세요"
                               class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>

                    <!-- 파라미터 -->
                    <div>
                        <label class="block text-sm font-medium mb-2">파라미터 (선택사항)</label>
                        <textarea x-model="newEndpoint.parameters" 
                                  placeholder="예: page: 페이지 번호, limit: 결과 개수 제한"
                                  class="w-full p-2 border border-gray-300 rounded-lg h-20 focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>

                    <!-- 요청 본문 (POST, PUT, PATCH만) -->
                    <div x-show="['POST', 'PUT', 'PATCH'].includes(newEndpoint.method)">
                        <label class="block text-sm font-medium mb-2">요청 본문 예시 (JSON)</label>
                        <textarea x-model="newEndpoint.request_body" 
                                  placeholder='{"name": "string", "email": "string"}'
                                  class="w-full p-2 border border-gray-300 rounded-lg h-20 focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>

                    <!-- 응답 예시 -->
                    <div>
                        <label class="block text-sm font-medium mb-2">응답 예시 (JSON)</label>
                        <textarea x-model="newEndpoint.responses" 
                                  placeholder='{"success": true, "data": {...}}'
                                  class="w-full p-2 border border-gray-300 rounded-lg h-20 focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>

                    <!-- 태그 -->
                    <div>
                        <label class="block text-sm font-medium mb-2">태그 (콤마로 구분)</label>
                        <input x-model="newEndpoint.tags_string" 
                               type="text" 
                               placeholder="users, authentication, admin"
                               class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    </div>

                    <!-- 미리보기 -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h4 class="font-medium mb-2">미리보기:</h4>
                        <div class="flex items-center space-x-2 text-sm">
                            <span class="px-2 py-1 text-xs font-medium rounded"
                                  :class="{
                                      'bg-green-100 text-green-800': newEndpoint.method === 'GET',
                                      'bg-blue-100 text-blue-800': newEndpoint.method === 'POST',
                                      'bg-yellow-100 text-yellow-800': newEndpoint.method === 'PUT',
                                      'bg-red-100 text-red-800': newEndpoint.method === 'DELETE',
                                      'bg-purple-100 text-purple-800': newEndpoint.method === 'PATCH'
                                  }"
                                  x-text="newEndpoint.method">
                            </span>
                            <span class="font-mono" x-text="newEndpoint.path || '/api/endpoint'"></span>
                        </div>
                        <p class="text-sm text-gray-600 mt-1" x-text="newEndpoint.description || '설명 없음'"></p>
                    </div>
                </div>

                <!-- 버튼 -->
                <div class="flex space-x-3 mt-6">
                    <button @click="saveEndpoint()" 
                            :disabled="!newEndpoint.path || !newEndpoint.description"
                            class="flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed">
                        <span x-show="editingEndpoint !== null">💾 수정 완료</span>
                        <span x-show="editingEndpoint === null">➕ 추가</span>
                    </button>
                    <button @click="showEndpointModal = false" 
                            class="flex-1 bg-gray-300 text-gray-700 p-3 rounded-lg hover:bg-gray-400">
                        ❌ 취소
                    </button>
                </div>
            </div>
        </div>

        <!-- 성공 메시지 -->
        <div x-show="showSuccess" 
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform translate-y-2"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             class="fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg">
            ✅ API 코드가 성공적으로 생성되었습니다!
        </div>
    </div>

    <script>
        function apiGenerator() {
            return {
                activeSection: 'examples', // 활성 섹션: examples, custom, endpoints
                spec: {
                    name: '',
                    description: '',
                    version: '1.0.0',
                    framework: 'fastapi',
                    database: 'postgresql',
                    authentication: 'jwt',
                    endpoints: []
                },
                examples: [],
                generatedCode: null,
                isGenerating: false,
                activeTab: 'main',
                selectedExample: null,
                showSuccess: false,
                
                // 엔드포인트 관리
                showEndpointModal: false,
                editingEndpoint: null,
                newEndpoint: {
                    path: '',
                    method: 'GET',
                    description: '',
                    parameters: '',
                    request_body: '',
                    responses: '',
                    tags_string: '',
                    tags: []
                },
                
                async init() {
                    await this.loadExamples();
                },
                
                async loadExamples() {
                    try {
                        const response = await fetch('/api/examples');
                        const data = await response.json();
                        this.examples = data.examples;
                    } catch (error) {
                        console.error('예제 로드 실패:', error);
                    }
                },
                
                async loadExample(exampleId) {
                    try {
                        this.selectedExample = exampleId;
                        const response = await fetch(`/api/examples/${exampleId}`);
                        const data = await response.json();
                        this.spec = { ...data };
                        this.activeSection = 'endpoints'; // 예제 로드 후 엔드포인트 섹션으로 이동
                    } catch (error) {
                        console.error('예제 로드 실패:', error);
                        alert('예제를 불러오는데 실패했습니다.');
                    }
                },
                
                createBlankAPI() {
                    this.spec = {
                        name: '',
                        description: '',
                        version: '1.0.0',
                        framework: 'fastapi',
                        database: 'postgresql',
                        authentication: 'jwt',
                        endpoints: []
                    };
                    this.selectedExample = null;
                    this.activeSection = 'endpoints';
                },
                
                // 엔드포인트 관리 함수들
                resetEndpointForm() {
                    this.newEndpoint = {
                        path: '',
                        method: 'GET',
                        description: '',
                        parameters: '',
                        request_body: '',
                        responses: '',
                        tags_string: '',
                        tags: []
                    };
                },
                
                editEndpoint(index) {
                    this.editingEndpoint = index;
                    const endpoint = this.spec.endpoints[index];
                    this.newEndpoint = {
                        ...endpoint,
                        tags_string: endpoint.tags ? endpoint.tags.join(', ') : ''
                    };
                    this.showEndpointModal = true;
                },
                
                deleteEndpoint(index) {
                    if (confirm('이 엔드포인트를 삭제하시겠습니까?')) {
                        this.spec.endpoints.splice(index, 1);
                    }
                },
                
                saveEndpoint() {
                    if (!this.newEndpoint.path || !this.newEndpoint.description) {
                        alert('경로와 설명은 필수 입력 항목입니다.');
                        return;
                    }
                    
                    // 태그 문자열을 배열로 변환
                    const tags = this.newEndpoint.tags_string
                        .split(',')
                        .map(tag => tag.trim())
                        .filter(tag => tag.length > 0);
                    
                    const endpointData = {
                        path: this.newEndpoint.path,
                        method: this.newEndpoint.method,
                        description: this.newEndpoint.description,
                        parameters: this.newEndpoint.parameters || null,
                        request_body: this.newEndpoint.request_body || null,
                        responses: this.newEndpoint.responses || null,
                        tags: tags
                    };
                    
                    if (this.editingEndpoint !== null) {
                        // 편집 모드
                        this.spec.endpoints[this.editingEndpoint] = endpointData;
                    } else {
                        // 추가 모드
                        this.spec.endpoints.push(endpointData);
                    }
                    
                    this.showEndpointModal = false;
                    this.resetEndpointForm();
                    this.editingEndpoint = null;
                },
                
                // 미리 정의된 엔드포인트 템플릿 추가
                addQuickEndpoint(template) {
                    const templates = {
                        userList: {
                            path: '/api/users',
                            method: 'GET',
                            description: '사용자 목록 조회',
                            parameters: 'page: 페이지 번호, limit: 결과 개수',
                            responses: '{"success": true, "data": {"items": [], "total": 0}}',
                            tags: ['users']
                        },
                        userCreate: {
                            path: '/api/users',
                            method: 'POST',
                            description: '새 사용자 생성',
                            request_body: '{"username": "string", "email": "string", "password": "string"}',
                            responses: '{"success": true, "data": {"id": 1, "username": "string"}}',
                            tags: ['users']
                        },
                        userDetail: {
                            path: '/api/users/{user_id}',
                            method: 'GET',
                            description: '특정 사용자 조회',
                            parameters: 'user_id: 사용자 ID',
                            responses: '{"success": true, "data": {"id": 1, "username": "string", "email": "string"}}',
                            tags: ['users']
                        },
                        login: {
                            path: '/api/auth/login',
                            method: 'POST',
                            description: '사용자 로그인',
                            request_body: '{"username": "string", "password": "string"}',
                            responses: '{"access_token": "string", "token_type": "bearer"}',
                            tags: ['authentication']
                        }
                    };
                    
                    if (templates[template]) {
                        this.spec.endpoints.push(templates[template]);
                    }
                },
                
                async generateAPI() {
                    if (!this.spec.name || !this.spec.description) {
                        alert('API 이름과 설명을 입력해주세요.');
                        return;
                    }
                    
                    if (this.spec.endpoints.length === 0) {
                        alert('최소 하나의 엔드포인트를 추가해주세요.');
                        return;
                    }
                    
                    this.isGenerating = true;
                    try {
                        const response = await fetch('/api/generate', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(this.spec)
                        });
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.detail || 'API 생성 실패');
                        }
                        
                        this.generatedCode = await response.json();
                        this.showSuccessMessage();
                        
                        // 생성 완료 후 결과 탭으로 스크롤
                        document.querySelector('.grid').scrollIntoView({ behavior: 'smooth' });
                        
                    } catch (error) {
                        console.error('API 생성 오류:', error);
                        alert('API 생성 중 오류가 발생했습니다: ' + error.message);
                    } finally {
                        this.isGenerating = false;
                    }
                },
                
                getActiveTabContent() {
                    if (!this.generatedCode) return '';
                    
                    switch(this.activeTab) {
                        case 'main': return this.generatedCode.main_code || '';
                        case 'models': return this.generatedCode.models || '';
                        case 'database': return this.generatedCode.database || '';
                        default: return '';
                    }
                },
                
                async downloadAll() {
                    try {
                        const response = await fetch('/api/download', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(this.spec)
                        });
                        
                        if (!response.ok) {
                            throw new Error('다운로드 요청 실패');
                        }
                        
                        const data = await response.json();
                        
                        // 각 파일을 개별적으로 다운로드
                        Object.entries(data.files).forEach(([filename, content]) => {
                            this.downloadFile(filename, content);
                        });
                        
                    } catch (error) {
                        console.error('다운로드 오류:', error);
                        alert('파일 다운로드 중 오류가 발생했습니다: ' + error.message);
                    }
                },
                
                downloadFile(filename, content) {
                    const element = document.createElement('a');
                    const file = new Blob([content], { type: 'text/plain' });
                    element.href = URL.createObjectURL(file);
                    element.download = filename;
                    document.body.appendChild(element);
                    element.click();
                    document.body.removeChild(element);
                },
                
                showSuccessMessage() {
                    this.showSuccess = true;
                    setTimeout(() => {
                        this.showSuccess = false;
                    }, 3000);
                }
            }
        }
    </script>
</body>
</html>
"""


# ============================================================================
# 5. 애플리케이션 실행부
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    print("🚀 REST API Generator 시작!")
    print("=" * 50)
    print("📖 API 문서: http://localhost:8000/docs")
    print("🌐 웹 인터페이스: http://localhost:8000")
    print("📋 예제 API: http://localhost:8000/api/examples")
    print("=" * 50)
    print("💡 사용법:")
    print("1. 웹 브라우저로 http://localhost:8000 접속")
    print("2. 예제 중 하나 선택 또는 직접 설정")
    print("3. 'API 생성하기' 버튼 클릭")
    print("4. 생성된 코드 다운로드 및 실행")
    print("=" * 50)

    uvicorn.run("main2:app", host="0.0.0.0", port=8000, reload=True)
